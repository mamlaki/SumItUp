@page "/calculator"
@inject SumItUp.Data.Calculator Calculator

<div class="container">
    <div class="dropdown">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Select Calculator Mode
        </button>
        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            <a class="dropdown-item" @onclick="@(() => SetCalculatorMode("Standard"))">Standard</a>
            <a class="dropdown-item" @onclick="@(() => SetCalculatorMode("Complex"))">Complex</a>
        </div>
    </div>
    <div class="row justify-content-center mt-5">
        <div class="col-md-4">
            <div class="calculator bg-dark p-4 rounded-3">
                <input type="text" class="form-control calculator-display mb-3 p-2 rounded-3 text-end" readonly @bind="display" />
                <div class="row mb-3">
                    <div class="col-3"><button class="btn btn-dark w-100" @onclick="Clear">AC</button></div>
                    <div class="col-3"><button class="btn btn-dark w-100" @onclick="() => ToggleSign()">±</button></div>
                    <div class="col-3"><button class="btn btn-dark w-100">%</button></div>
                    <div class="col-3"><button class="btn btn-function w-100" @onclick="() => SetBinaryOperation(Calculator.Divide)">÷</button></div>
                </div>
                <div class="row mb-3">
                    @for (int i = 7; i <= 9; i++)
                    {
                        int number = i;
                        <div class="col-3"><button class="btn btn-dark w-100" @onclick="() => AppendNumber(number)">@number</button></div>
                    }
                    <div class="col-3"><button class="btn btn-function w-100" @onclick="() => SetBinaryOperation(Calculator.Multiply)">X</button></div>
                </div>
                <div class="row mb-3">
                    @for (int i = 4; i <= 6; i++)
                    {
                        int number = i;
                        <div class="col-3"><button class="btn btn-dark w-100" @onclick="() => AppendNumber(number)">@number</button></div>
                    }
                    <div class="col-3"><button class="btn btn-function w-100" @onclick="() => SetBinaryOperation(Calculator.Subtract)">-</button></div>
                </div>
                <div class="row mb-3">
                    @for (int i = 1; i <= 3; i++)
                    {
                        int number = i;
                        <div class="col-3"><button class="btn btn-dark w-100" @onclick="() => AppendNumber(number)">@number</button></div>
                    }
                    <div class="col-3"><button class="btn btn-function w-100" @onclick="() => SetBinaryOperation(Calculator.Add)">+</button></div>
                </div>
                <div class="row mb-3">
                    <div class="col-6"><button class="btn btn-dark w-100" @onclick="() => AppendNumber(0)">0</button></div>
                    <div class="col-3"><button class="btn btn-dark w-100" @onclick="() => InsertDecimal()">.</button></div>
                    <div class="col-3"><button class="btn btn-function w-100" @onclick="Calculate">=</button></div>
                    <div class="col-3"></div>
                </div>

                @* Complex Mode Buttons *@
                <div class="complex-calculator-section @(CalculatorMode == "Complex" ? "show" : "")">
                    <div class="row mb-3">
                        <div class="col-3"><button class="btn btn-alt w-100" @onclick="() => SetUnaryOperation(Calculator.SquareRoot)">√</button></div>
                        <div class="col-3"><button class="btn btn-alt w-100" @onclick="() => SetUnaryOperation(Calculator.CubeRoot)">∛</button></div>
                        <div class="col-3"><button class="btn btn-alt w-100" @onclick="() => SetBinaryOperation(Calculator.Power)">^</button></div>
                        <div class="col-3"><button class="btn btn-alt w-100" @onclick="() => SetUnaryOperation(Calculator.Exponential)">e^x</button></div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-3"><button class="btn btn-alt w-100" @onclick="() => SetUnaryOperation(Calculator.Logarithm)">log</button></div>
                        <div class="col-3"><button class="btn btn-alt w-100" @onclick="() => SetUnaryOperation(Calculator.NaturalLogarithm)">ln</button></div>
                        <div class="col-3"><button class="btn btn-alt w-100" @onclick="() => SetUnaryOperation(Calculator.Sine)">sin</button></div>
                        <div class="col-3"><button class="btn btn-alt w-100" @onclick="() => SetUnaryOperation(Calculator.Cosine)">cos</button></div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-3"><button class="btn btn-alt w-100" @onclick="() => SetUnaryOperation(Calculator.Tangent)">tan</button></div>
                        <div class="col-3"><button class="btn btn-alt w-100" @onclick="() => SetUnaryOperation(Calculator.ArcSine)">asin</button></div>
                        <div class="col-3"><button class="btn btn-alt w-100" @onclick="() => SetUnaryOperation(Calculator.ArcCosine)">acos</button></div>
                        <div class="col-3"><button class="btn btn-alt w-100" @onclick="() => SetUnaryOperation(Calculator.ArcTangent)">atan</button></div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-3"><button class="btn btn-alt w-100" @onclick="CalculateFactorial">!</button></div>
                        <div class="col-3"><button class="btn btn-alt w-100" @onclick="InsertPi">π</button></div>
                        <div class="col-3"><button class="btn btn-alt w-100" @onclick="() => InsertInfinity()">∞</button></div>
                        <div class="col-3"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string display = "";
    private string numbersInput = "";
    private string CalculatorMode { get; set; } = "Standard";
    private double firstOperand;
    private double secondOperand;
    private Func<double, double, double> binaryOperation;
    private Func<double, double> unaryOperation;

    private void AppendNumber(int number)
    {
        display += number.ToString();
    }

    private void ToggleSign()
    {
        if (!string.IsNullOrEmpty(display))
        {
            if (display[0] == '-')
            {
                display = display.Substring(1);
            }
            else
            {
                display = "-" + display;
            }
        }
    }

    private void InsertDecimal()
    {
        if (!display.Contains("."))
        {
            display += ".";
        }
    }

    private void InsertInfinity()
    {
        display = double.PositiveInfinity.ToString("G");
    }

    private void SetBinaryOperation(Func<double, double, double> op)
    {
        firstOperand = double.Parse(display);
        display = "";
        binaryOperation = op;
    }

    private void SetUnaryOperation(Func<double, double> op)
    {
        unaryOperation = op;
        CalculateUnary();
    }

    private void InsertPi()
    {
        display += Math.PI.ToString();
    }

    private double RoundToZeroIfClose(double value)
    {
        const double tolerance = 1e-10;
        return Math.Abs(value) < tolerance ? 0.0 : value;
    }

    private void Calculate()
    {
        secondOperand = double.Parse(display);

        var result = binaryOperation(firstOperand, secondOperand);

        display = RoundToZeroIfClose(result).ToString();
    }

    private void CalculateUnary()
    {
        if (unaryOperation != null)
        {
            firstOperand = double.Parse(display);

            var result = unaryOperation(firstOperand);

            display = RoundToZeroIfClose(result).ToString();
        }
    }

    private void CalculateFactorial()
    {
        int number;
        bool isParsed = int.TryParse(display, out number);

        if (isParsed && number >= 0)
        {
            var result = Calculator.Factorial(number);
            display = result.ToString();
        }
        else
        {
            display = "Invalid input";
        }
    }

    private void Clear()
    {
        display = "";
        firstOperand = 0;
        secondOperand = 0;
        binaryOperation = null;
        unaryOperation = null;
    }

    private double[] ParseNumbersInput()
    {
        return ParseNumbersInput(numbersInput);
    }

    private double[] ParseNumbersInput(string input)
    {
        var numberStrings = input.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        var numbers = new double[numberStrings.Length];

        for (int i = 0; i < numberStrings.Length; i++)
        {
            if (!double.TryParse(numberStrings[i], out numbers[i]))
            {
                return null;
            }
        }

        return numbers;
    }

    private void SetCalculatorMode(string mode)
    {
        CalculatorMode = mode;
    }
}