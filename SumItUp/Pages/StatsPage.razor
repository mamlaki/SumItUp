@page "/stats"
@inject SumItUp.Data.Calculator Calculator

<div class="container">
    <div class="statistical-operations p-4 row">
        <div class="col-lg-6">
            <textarea rows="4" cols="50" class="form-control mb-3" placeholder="Enter numbers separated by commans" @bind="numbersInput"></textarea>
            <div class="mb-3">
                <button class="btn btn-info mb-2" @onclick="CalculateMean">Calculate Mean</button>
                <button class="btn btn-info mb-2" @onclick="CalculateMedian">Calculate Median</button>
                <button class="btn btn-info mb-2" @onclick="CalculateMode">Calculate Mode</button>
            </div>
            <hr />
            <div class="sample-population-radio-buttons mb-3 text-start">
                <label class="me-3">
                    <input type="radio" name="samplePopulation" value="Sample" checked="@isSample" @onchange="() => isSample = true" />
                    Sample
                </label>
                <label>
                    <input type="radio" name="samplePopulation" value="Population" checked="@( !isSample)" @onchange="() => isSample = false" />
                    Population
                </label>
            </div>
            <div class="mb-3">
                <button class="btn btn-info mb-2" @onclick="CalculateVariance">Calculate Variance</button>
                <button class="btn btn-info mb-2" @onclick="CalculateStandardDeviation">Calculate Standard Deviation</button>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="results bg-light p-3 rounded">
                <div><strong>Mean Result:</strong> @meanResult</div>
                <div><strong>Median Result:</strong> @medianResult</div>
                <div><strong>Mode Reuslt:</strong> @modeResult</div>
                <div><strong>Variance Result:</strong> @varianceResult</div>
                <div><strong>Standard Deviation Result:</strong> @standardDeviationResult</div>
            </div>
        </div>
    </div>
</div>

@code {
    private string numbersInput = "";
    private string meanResult = "";
    private string medianResult = "";
    private string modeResult = "";
    private string varianceResult;
    private string standardDeviationResult;
    private bool isSample = true;

    private void CalculateMean()
    {
        var numbers = ParseNumbersInput();
        if (numbers != null)
        {
            var mean = Calculator.Mean(numbers);
            meanResult = mean.ToString();
        }
        else
        {
            meanResult = "Invalid number input.";
        }
    }

    private void CalculateMedian()
    {
        var numbers = ParseNumbersInput();
        if (numbers != null)
        {
            var median = Calculator.Median(numbers);
            medianResult = median.ToString();
        }
        else
        {
            medianResult = "Invalid number input.";
        }
    }

    private void CalculateMode()
    {
        var numbers = ParseNumbersInput();
        if (numbers != null)
        {
            var mode = Calculator.Mode(numbers);
            modeResult = string.Join(", ", mode);
        }
        else
        {
            modeResult = "Invalid number input.";
        }
    }

    private void CalculateVariance()
    {
        var numbers = ParseNumbersInput();
        if (numbers != null)
        {
            var variance = Calculator.Variance(numbers, isSample);
            varianceResult = variance.ToString();
        }
        else
        {
            varianceResult = "Invalid number input.";
        }
    }

    private void CalculateStandardDeviation()
    {
        var numbers = ParseNumbersInput();
        if (numbers != null)
        {
            var standardDeviation = Calculator.StandardDeviation(numbers, isSample);
            standardDeviationResult = standardDeviation.ToString();
        }
        else
        {
            standardDeviationResult = "Invalid number input.";
        }
    }

    private double[] ParseNumbersInput()
    {
        return ParseNumbersInput(numbersInput);
    }

    private double[] ParseNumbersInput(string input)
    {
        var numberStrings = input.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        var numbers = new double[numberStrings.Length];

        for (int i = 0; i < numberStrings.Length; i++)
        {
            if (!double.TryParse(numberStrings[i], out numbers[i]))
            {
                meanResult = "Invalid number input.";
                return null;
            }
        }

        return numbers;
    }
}

