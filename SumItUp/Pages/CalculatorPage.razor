@page "/calculator"
@inject SumItUp.Data.Calculator Calculator
@inject SumItUp.Data.Regression Regression
@using System.Text

<div class="calculator-container"> 
    <input type="text" readonly @bind="display" />
    <div class="button-grid">
        @for (var i = 1; i <= 9; i++)
        {
            var number = i;
            <button @onclick="() => AppendNumber(number)">@number</button>
        }
        <button @onclick="() => AppendNumber(0)">0</button>
        <button @onclick="() => ToggleSign()">±</button>
        <button @onclick="() => InsertDecimal()">.</button>
        <button @onclick="() => InsertInfinity()">∞</button>
        <button @onclick="() => SetBinaryOperation(Calculator.Add)">+</button>
        <button @onclick="() => SetBinaryOperation(Calculator.Subtract)">-</button>
        <button @onclick="() => SetBinaryOperation(Calculator.Multiply)">*</button>
        <button @onclick="() => SetBinaryOperation(Calculator.Divide)">/</button>
        <button @onclick="() => SetUnaryOperation(Calculator.SquareRoot)">√</button>
        <button @onclick="() => SetUnaryOperation(Calculator.CubeRoot)">∛</button>
        <button @onclick="() => SetBinaryOperation(Calculator.Power)">^</button>
        <button @onclick="() => SetUnaryOperation(Calculator.Exponential)">e^x</button>
        <button @onclick="() => SetUnaryOperation(Calculator.Logarithm)">log</button>
        <button @onclick="() => SetUnaryOperation(Calculator.NaturalLogarithm)">ln</button>
        <button @onclick="() => SetUnaryOperation(Calculator.Sine)">sin</button>
        <button @onclick="() => SetUnaryOperation(Calculator.Cosine)">cos</button>
        <button @onclick="() => SetUnaryOperation(Calculator.Tangent)">tan</button>
        <button @onclick="() => SetUnaryOperation(Calculator.ArcSine)">asin</button>
        <button @onclick="() => SetUnaryOperation(Calculator.ArcCosine)">acos</button>
        <button @onclick="() => SetUnaryOperation(Calculator.ArcTangent)">atan</button>
        <button @onclick="CalculateFactorial">!</button>
        <button @onclick="InsertPi">π</button>
        <button @onclick="Calculate">=</button>
        <button @onclick="Clear">C</button>
    </div>
    <div class="statistical-operations">
        <textarea placeholder="Enter numbers separated by commas" @bind="numbersInput"></textarea>
        <button @onclick="CalculateMean">Calculate Mean</button>
        <button @onclick="CalculateMedian">CalculateMedian</button>
        <button @onclick="CalculateMode">Calculate Mode</button>
        <div class="sample-population-radio-buttons">
            <label>
                <input type="radio" name="samplePopulation" value="Sample" checked="@isSample" @onchange="() => isSample = true" />
                Sample
            </label>
            <label>
                <input type="radio" name="samplePopulation" value="Population" checked="@( !isSample)" @onchange="() => isSample = false" />
                Population
            </label>
        </div>
        <button @onclick="CalculateVariance">Calculate Variance</button>
        <button @onclick="CalculateStandardDeviation">Calculate Standard Deviation</button>
        <div>
            Mean Result: @meanResult
        </div>
        <div>
            Median Result: @medianResult
        </div>
        <div>
            Mode Result: @modeResult
        </div>
        <div>
            Variance Result: @varianceResult
        </div>
        <div>
            Standard Deviation Result: @standardDeviationResult
        </div>
    </div>
    <div class="regression-operations">
        <span class="error">@errorMessage</span>
        <textarea placeholder="Enter x-values separated by commas" @bind="xValuesInput"></textarea>
        <textarea placeholder="Enter y-values separated by commas" @bind="yValuesInput"></textarea>
        <button @onclick="CalculateRegression">Calculate Regression</button>
        <div>
            Linear Regression Equation: y = @slope x + @intercept 
        </div>
    </div>
</div>

@code {
    private string display = "";
    private string numbersInput = "";
    private string meanResult = "";
    private string medianResult = "";
    private string modeResult = "";
    private string xValuesInput = "";
    private string yValuesInput = "";
    private string errorMessage = "";
    private string varianceResult;
    private string standardDeviationResult;
    private double firstOperand;
    private double secondOperand;
    private double slope;
    private double intercept;
    private bool isSample = true;
    private Func<double, double, double> binaryOperation;
    private Func<double, double> unaryOperation;

    private void AppendNumber(int number)
    {
        display += number.ToString();
    }

    private void ToggleSign()
    {
        if (!string.IsNullOrEmpty(display))
        {
            if (display[0] == '-')
            {
                display = display.Substring(1);
            }
            else
            {
                display = "-" + display;
            }
        }
    }

    private void InsertDecimal()
    {
        if (!display.Contains("."))
        {
            display += ".";
        }
    }

    private void InsertInfinity()
    {
        display = double.PositiveInfinity.ToString("G");
    }

    private void SetBinaryOperation(Func<double, double, double> op)
    {
        firstOperand = double.Parse(display);
        display = "";
        binaryOperation = op;
    }

    private void SetUnaryOperation(Func<double, double> op)
    {
        unaryOperation = op;
        CalculateUnary();
    }

    private void InsertPi()
    {
        display += Math.PI.ToString();
    }

    private double RoundToZeroIfClose(double value)
    {
        const double tolerance = 1e-10;
        return Math.Abs(value) < tolerance ? 0.0 : value;
    }

    private void Calculate()
    {
        secondOperand = double.Parse(display);

        var result = binaryOperation(firstOperand, secondOperand);

        display = RoundToZeroIfClose(result).ToString();
    }

    private void CalculateUnary()
    {
        if (unaryOperation != null)
        {
            firstOperand = double.Parse(display);

            var result = unaryOperation(firstOperand);

            display = RoundToZeroIfClose(result).ToString();
        }
    }

    private void CalculateRegression()
    {
        var xValues = ParseNumbersInput(xValuesInput);
        var yValues = ParseNumbersInput(yValuesInput);

        if (xValues != null && yValues != null && xValues.Length == yValues.Length)
        {
            slope = SumItUp.Data.Regression.CalculateSlope(xValues, yValues);
            intercept = SumItUp.Data.Regression.CalculateIntercept(xValues, yValues, slope);
            errorMessage = "";
        }
        else
        {
            errorMessage = "Error: Invalid input or mismatched array lengths.";
        }
    }

    private void CalculateFactorial()
    {
        int number;
        bool isParsed = int.TryParse(display, out number);

        if (isParsed && number >= 0)
        {
            var result = Calculator.Factorial(number);
            display = result.ToString();
        }
        else
        {
            display = "Invalid input";
        }
    }

    private void Clear()
    {
        display = "";
        firstOperand = 0;
        secondOperand = 0;
        binaryOperation = null;
        unaryOperation = null;
    }

    private void CalculateMean()
    {
        var numbers = ParseNumbersInput();
        if (numbers != null)
        {
            var mean = Calculator.Mean(numbers);
            meanResult = mean.ToString();
        }
        else
        {
            meanResult = "Invalid number input.";
        }
    }

    private void CalculateMedian()
    {
        var numbers = ParseNumbersInput();
        if (numbers != null)
        {
            var median = Calculator.Median(numbers);
            medianResult = median.ToString();
        }
        else
        {
            medianResult = "Invalid number input.";
        }
    }

    private void CalculateMode()
    {
        var numbers = ParseNumbersInput();
        if (numbers != null)
        {
            var mode = Calculator.Mode(numbers);
            modeResult = string.Join(", ", mode);
        }
        else
        {
            modeResult = "Invalid number input.";
        }
    }

    private void CalculateVariance()
    {
        var numbers = ParseNumbersInput();
        if (numbers != null)
        {
            var variance = Calculator.Variance(numbers, isSample);
            varianceResult = variance.ToString();
        }
        else
        {
            varianceResult = "Invalid number input.";
        }
    }

    private void CalculateStandardDeviation()
    {
        var numbers = ParseNumbersInput();
        if (numbers != null)
        {
            var standardDeviation = Calculator.StandardDeviation(numbers, isSample);
            standardDeviationResult = standardDeviation.ToString();
        }
        else
        {
            standardDeviationResult = "Invalid number input.";
        }
    }

    private double[] ParseNumbersInput()
    {
        return ParseNumbersInput(numbersInput);
    }

    private double[] ParseNumbersInput(string input)
    {
        var numberStrings = input.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        var numbers = new double[numberStrings.Length];

        for (int i = 0; i < numberStrings.Length; i++)
        {
            if (!double.TryParse(numberStrings[i], out numbers[i]))
            {
                meanResult = "Invalid number input.";
                return null;
            }
        }

        return numbers;
    }
}