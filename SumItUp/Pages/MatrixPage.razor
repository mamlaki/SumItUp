@page "/matrix"
@inject SumItUp.Data.Calculator Calculator
@using System.Text

<div class="container">
    <div class="matrix-operations p-5 rounded bg-light shadow">
        <div class="row mb-3">
            <div class="col-md-6 mb-3">
                <textarea class="form-control" @bind="matrix1Input" placeholder="Enter matrix 1 data"></textarea>
            </div>
            <div class="col-md-6 mb-3">
                <textarea class="form-control" @bind="matrix2Input" placeholder="Enter matrix 2 data"></textarea>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-6 mb-3">
                <button class="btn btn-outline-secondary" @onclick="AddMatrices">Add</button>
            </div>
            <div class="col-md-6 mb-3">
                <button class="btn btn-outline-secondary" @onclick="SubtractMatrices">Subtract</button>
            </div>
            <div class="col-md-6 mb-3">
                <button class="btn btn-outline-secondary" @onclick="MultiplyMatrices">Multiply</button>
            </div>
            <div class="col-md-6 mb-3">
                <button class="btn btn-outline-secondary" @onclick="InvertMatrix1">Invert Matrix 1</button>
            </div>
            <div class="col-md-6 mb-3">
                <button class="btn btn-outline-secondary" @onclick="InvertMatrix2">Invert Matrix 2</button>
            </div>
            <div class="col-md-6 mb-3">
                <button class="btn btn-outline-secondary" @onclick="CalculateDeterminant1">Determinant of Matrix 1</button>
            </div>
            <div class="col-md-6 mb-3">
                <button class="btn btn-outline-secondary" @onclick="CalculateDeterminant2">Determinant of Matrix 2</button>
            </div>
            <div class="col-md-6 mb-3">
                <button class="btn btn-outline-secondary" @onclick="CalculateRank1">Rank of Matrix 1</button>
            </div>
            <div class="col-md-6 mb-3">
                <button class="btn btn-outline-secondary" @onclick="CalculateRank2">Rank of Matrix 2</button>
            </div>
            <div class="col-md-6 mb-3">
                <button class="btn btn-outline-secondary" @onclick="CalculateTrace1">Trace of Matrix 1</button>
            </div>
            <div class="col-md-6 mb-3">
                <button class="btn btn-outline-secondary" @onclick="CalculateTrace2">Trace of Matrix 2</button>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <label>Result:</label>
                <pre class="bg-light p-3 border rounded">@matrixResult</pre>
            </div>
        </div>
    </div>
</div>

@code {
    private string matrix1Input = "";
    private string matrix2Input = "";
    private string matrixResult = "";

    private void AddMatrices()
    {
        var matrix1 = ParseMatrix(matrix1Input);
        var matrix2 = ParseMatrix(matrix2Input);
        var resultMatrix = matrix1.Add(matrix2);

        matrixResult = FormatMatrix(resultMatrix);
    }

    private void SubtractMatrices()
    {
        var matrix1 = ParseMatrix(matrix1Input);
        var matrix2 = ParseMatrix(matrix2Input);
        var resultMatrix = matrix1.Subtract(matrix2);

        matrixResult = FormatMatrix(resultMatrix);
    }

    private void MultiplyMatrices()
    {
        var matrix1 = ParseMatrix(matrix1Input);
        var matrix2 = ParseMatrix(matrix2Input);
        var resultMatrix = matrix1.Multiply(matrix2);

        matrixResult = FormatMatrix(resultMatrix);
    }

    private void InvertMatrix1()
    {
        var matrix1 = ParseMatrix(matrix1Input);
        var resultMatrix = matrix1.Invert();
        matrixResult = FormatMatrix(resultMatrix);
    }

    private void InvertMatrix2()
    {
        var matrix2 = ParseMatrix(matrix2Input);
        var resultMatrix = matrix2.Invert();
        matrixResult = FormatMatrix(resultMatrix);
    }

    private void CalculateDeterminant1()
    {
        var matrix1 = ParseMatrix(matrix1Input);
        var determinant = matrix1.Determinant();
        matrixResult = determinant.ToString();
    }

    private void CalculateDeterminant2()
    {
        var matrix2 = ParseMatrix(matrix2Input);
        var determinant = matrix2.Determinant();
        Console.WriteLine($"Determinant2: {determinant}");
        matrixResult = determinant.ToString();
    }

    private void CalculateRank1()
    {
        var matrix1 = ParseMatrix(matrix1Input);
        var rank = matrix1.Rank();
        matrixResult = $"Rank of Matrix 1: {rank}";
    }

    private void CalculateRank2()
    {
        var matrix2 = ParseMatrix(matrix2Input);
        var rank = matrix2.Rank();
        matrixResult = $"Rank of Matrix 2: {rank}";
    }

    private void CalculateTrace1()
    {
        var matrix1 = ParseMatrix(matrix1Input);
        try
        {
            var trace = matrix1.Trace();
            matrixResult = $"Trace of Matrix 1: {trace}";
        }
        catch (InvalidOperationException ex)
        {
            matrixResult = ex.Message;
        }
    }

    private void CalculateTrace2()
    {
        var matrix2 = ParseMatrix(matrix2Input);
        try
        {
            var trace = matrix2.Trace();
            matrixResult = $"Trace of Matrix 2: {trace}";
        }
        catch (InvalidOperationException ex)
        {
            matrixResult = ex.Message;
        }
    }

    private string FormatMatrix(SumItUp.Data.Calculator.Matrix matrix)
    {
        var rows = matrix.Value.GetLength(0);
        var cols = matrix.Value.GetLength(1);
        var result = new StringBuilder();

        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                result.Append(Math.Round(matrix.Value[i, j], 1).ToString());
                if (j < cols - 1)
                {
                    result.Append("\t");
                }
            }
            if (i < rows - 1)
            {
                result.AppendLine();
            }
        }

        return result.ToString();
    }

    private SumItUp.Data.Calculator.Matrix ParseMatrix(string input)
    {
        var lines = input.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
        var numRows = lines.Length;
        var numCols = lines[0].Split(new[] { '\t', ' ' }, StringSplitOptions.RemoveEmptyEntries).Length;
        Console.WriteLine($"ParseMatrix - Rows: {numRows}, Cols: {numCols}");
        var values = new double[numRows, numCols];

        for (int i = 0; i < numRows; i++)
        {
            var cols = lines[i].Split(new[] { '\t', ' ' }, StringSplitOptions.RemoveEmptyEntries);
            for (int j = 0; j < numCols; j++)
            {
                if (!double.TryParse(cols[j], out values[i, j]))
                {
                    throw new FormatException($"Invalid number at row {i + 1}, column {j + 1}");
                }
            }
        }

        return new SumItUp.Data.Calculator.Matrix(values);
    }
}

