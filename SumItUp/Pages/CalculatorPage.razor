@page "/calculator"
@inject SumItUp.Data.Calculator Calculator

<div class="calculator-container"> 
    <input type="text" readonly @bind="display" />
    <div class="button-grid">
        @for (var i = 1; i <= 9; i++)
        {
            var number = i;
            <button @onclick="() => AppendNumber(number)">@number</button>
        }
        <button @onclick="() => AppendNumber(0)">0</button>
        <button @onclick="() => SetBinaryOperation(Calculator.Add)">+</button>
        <button @onclick="() => SetBinaryOperation(Calculator.Subtract)">-</button>
        <button @onclick="() => SetBinaryOperation(Calculator.Multiply)">*</button>
        <button @onclick="() => SetBinaryOperation(Calculator.Divide)">/</button>
        <button @onclick="() => SetUnaryOperation(Calculator.SquareRoot)">√</button>
        <button @onclick="() => SetUnaryOperation(Calculator.CubeRoot)">∛</button>
        <button @onclick="() => SetBinaryOperation(Calculator.Power)">^</button>
        <button @onclick="Calculate">=</button>
        <button @onclick="Clear">C</button>
    </div>
</div>

@code {
    private string display = "";
    private double firstOperand;
    private double secondOperand;
    private Func<double, double, double> binaryOperation;
    private Func<double, double> unaryOperation;

    private void AppendNumber(int number)
    {
        display += number.ToString();
    }

    private void SetBinaryOperation(Func<double, double, double> op)
    {
        firstOperand = double.Parse(display);
        display = "";
        binaryOperation = op;
    }

    private void SetUnaryOperation(Func<double, double> op)
    {   
        unaryOperation = op;
        CalculateUnary();
    }

    private void Calculate()
    {
        secondOperand = double.Parse(display);
        display = binaryOperation(firstOperand, secondOperand).ToString();
    }

    private void CalculateUnary()
    {
        if (unaryOperation != null)
        {
            firstOperand = double.Parse(display);
            display = unaryOperation(firstOperand).ToString();
        }
    }    

    private void Clear()
    {
        display = "";
        firstOperand = 0;
        secondOperand = 0;
        binaryOperation = null;
        unaryOperation = null;
    }
}

